"0","run_jl_simulation <- function(n, d, epsilon = 0.2, C = 15, seed = 42) {"
"0","  set.seed(seed)"
"0","  k <- ceiling(C * log(n) / epsilon^2)"
"0","  if (k >= d) {"
"0","    stop(sprintf("
"0","      ""Simulation stopped. The required dimension k=%d is not less than the original dimension d=%d. \nTry increasing d or n, or increasing epsilon."","
"0","      k, d"
"0","    ))"
"0","  }"
"0","  X_original <- matrix(rnorm(n * d), nrow = n, ncol = d)"
"0","  projection_matrix <- matrix(rnorm(k * d), nrow = k, ncol = d)"
"0","  X_projected <- (X_original %*% t(projection_matrix)) * (1 / sqrt(k))"
"0","  dist_orig_sq <- as.matrix(dist(X_original)^2)"
"0","  dist_proj_sq <- as.matrix(dist(X_projected)^2)"
"0","  original_dists_vec <- dist_orig_sq[upper.tri(dist_orig_sq)]"
"0","  projected_dists_vec <- dist_proj_sq[upper.tri(dist_proj_sq)]"
"0","  ratios <- projected_dists_vec[original_dists_vec > 1e-9] / original_dists_vec[original_dists_vec > 1e-9]"
"0","  lower_bound <- 1 - epsilon"
"0","  upper_bound <- 1 + epsilon"
"0","  preservation_pct <- 100 * sum(ratios >= lower_bound & ratios <= upper_bound) / length(ratios)"
"0","  plot_data <- data.frame(ratio = ratios)"
"0","  jl_plot <- ggplot(plot_data, aes(x = ratio)) +"
"0","    geom_histogram(bins = 50, fill = ""steelblue"", color = ""black"", alpha = 0.8) +"
"0","    geom_vline(xintercept = c(lower_bound, upper_bound), color = ""red"", linetype = ""dashed"", linewidth = 1) +"
"0","    labs("
"0","      title = ""Distribution of Distance Ratios After Projection"","
"0","      subtitle = sprintf(""n=%d, d=%d -> k=%d. Preservation: %.2f%%"", n, d, k, preservation_pct),"
"0","      x = ""Ratio of Squared Distances (Projected / Original)"", y = ""Count"""
"0","    ) + theme_minimal()"
"0","  return(list("
"0","    params = list(n = n, d = d, epsilon = epsilon, C = C),"
"0","    k = k,"
"0","    preservation_percentage = preservation_pct,"
"0","    plot = jl_plot"
"0","  ))"
"0","}"
"0","# Defines the colors"
"0","jl_summary_colors <- c("
"0","  params = ""#e6f0ff"",       "
"0","  reduction = ""#fffacd"",    "
"0","  verification = ""#f0fff0"" "
"0",")"
"0",""
"0","# This is the summary function"
"0","summarize_jl_results <- function(jl_results) {"
"0","  create_colored_block <- function(full_text, color) {"
"0","    sprintf("
"0","      '<div style=""background-color: %s; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin-bottom: 10px;""><pre style=""font-size: 1em; margin: 0;"">%s</pre></div>',"
"0","      color,"
"0","      htmltools::htmlEscape(full_text)"
"0","    )"
"0","  }"
"0","  "
"0","  # This provides the text content for each block "
"0","  "
"0","  # Block 1: Parameters"
"0","  params_text <- paste("
"0","    ""--- Simulation Parameters ---"","
"0","    paste(""Number of points (n):"", jl_results$params$n),"
"0","    paste(""Original dimension (d):"", jl_results$params$d),"
"0","    paste(""Error tolerance (epsilon):"", jl_results$params$epsilon),"
"0","    paste(""k-specifying constant (C):"", jl_results$params$C),"
"0","    sep = ""\n"""
"0","  )"
"0","  "
"0","  # Block 2: Reduction"
"0","  reduction_text <- paste("
"0","    ""--- Dimensionality Reduction ---"","
"0","    paste(""Required lower dimension (k):"", jl_results$k),"
"0","    sprintf(""Reduction factor: %.2f-fold"", jl_results$params$d / jl_results$k),"
"0","    sep = ""\n"""
"0","  )"
"0","  "
"0","  # Block 3: Verification"
"0","  verification_text <- paste("
"0","    ""--- Verification of the JL Lemma ---"","
"0","    sprintf(""Percentage of pairs preserved: %.2f%%"", jl_results$preservation_percentage),"
"0","    sep = ""\n"""
"0","  )"
"0","  "
"0","  # Convert each text block into a colored HTML block"
"0","  html_block1 <- create_colored_block(params_text, jl_summary_colors[""params""])"
"0","  html_block2 <- create_colored_block(reduction_text, jl_summary_colors[""reduction""])"
"0","  html_block3 <- create_colored_block(verification_text, jl_summary_colors[""verification""])"
"0","  "
"0","  # Combine and print the final html"
"0","  final_html <- paste(html_block1, html_block2, html_block3, sep = ""\n"")"
"0","  "
"0","  knitr::asis_output(final_html)"
"0","}"
