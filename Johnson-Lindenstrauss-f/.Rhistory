library(ggplot2)
library(htmltools)
library(ggplot2)
library(htmltools)
library(ggplot2)
library(htmltools)
run_jl_simulation <- function(n, d, epsilon = 0.2, C = 15, seed = 42) {
set.seed(seed)
k <- ceiling(C * log(n) / epsilon^2)
if (k >= d) {
stop(sprintf(
"Simulation stopped. The required dimension k=%d is not less than the original dimension d=%d. \nTry increasing d or n, or increasing epsilon.",
k, d
))
}
X_original <- matrix(rnorm(n * d), nrow = n, ncol = d)
projection_matrix <- matrix(rnorm(k * d), nrow = k, ncol = d)
X_projected <- (X_original %*% t(projection_matrix)) * (1 / sqrt(k))
dist_orig_sq <- as.matrix(dist(X_original)^2)
dist_proj_sq <- as.matrix(dist(X_projected)^2)
original_dists_vec <- dist_orig_sq[upper.tri(dist_orig_sq)]
projected_dists_vec <- dist_proj_sq[upper.tri(dist_proj_sq)]
ratios <- projected_dists_vec[original_dists_vec > 1e-9] / original_dists_vec[original_dists_vec > 1e-9]
lower_bound <- 1 - epsilon
upper_bound <- 1 + epsilon
preservation_pct <- 100 * sum(ratios >= lower_bound & ratios <= upper_bound) / length(ratios)
plot_data <- data.frame(ratio = ratios)
jl_plot <- ggplot(plot_data, aes(x = ratio)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.8) +
geom_vline(xintercept = c(lower_bound, upper_bound), color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Distance Ratios After Projection",
subtitle = sprintf("n=%d, d=%d -> k=%d. Preservation: %.2f%%", n, d, k, preservation_pct),
x = "Ratio of Squared Distances (Projected / Original)", y = "Count"
) + theme_minimal()
return(list(
params = list(n = n, d = d, epsilon = epsilon, C = C),
k = k,
preservation_percentage = preservation_pct,
plot = jl_plot
))
}
# Defines the colors
jl_summary_colors <- c(
params = "#e6f0ff",
reduction = "#fffacd",
verification = "#f0fff0"
)
# This is the summary function
summarize_jl_results <- function(jl_results) {
create_colored_block <- function(full_text, color) {
sprintf(
'<div style="background-color: %s; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin-bottom: 10px;"><pre style="font-size: 1em; margin: 0;">%s</pre></div>',
color,
htmltools::htmlEscape(full_text)
)
}
# This provides the text content for each block
# Block 1: Parameters
params_text <- paste(
"--- Simulation Parameters ---",
paste("Number of points (n):", jl_results$params$n),
paste("Original dimension (d):", jl_results$params$d),
paste("Error tolerance (epsilon):", jl_results$params$epsilon),
paste("k-specifying constant (C):", jl_results$params$C),
sep = "\n"
)
# Block 2: Reduction
reduction_text <- paste(
"--- Dimensionality Reduction ---",
paste("Required lower dimension (k):", jl_results$k),
sprintf("Reduction factor: %.2f-fold", jl_results$params$d / jl_results$k),
sep = "\n"
)
# Block 3: Verification
verification_text <- paste(
"--- Verification of the JL Lemma ---",
sprintf("Percentage of pairs preserved: %.2f%%", jl_results$preservation_percentage),
sep = "\n"
)
# Convert each text block into a colored HTML block
html_block1 <- create_colored_block(params_text, jl_summary_colors["params"])
html_block2 <- create_colored_block(reduction_text, jl_summary_colors["reduction"])
html_block3 <- create_colored_block(verification_text, jl_summary_colors["verification"])
# Combine and print the final html
final_html <- paste(html_block1, html_block2, html_block3, sep = "\n")
knitr::asis_output(final_html)
}
jl_results <- run_jl_simulation(n = 200, d = 20000)
summarize_jl_results(jl_results)
print(jl_results$plot)
jl_results <- run_jl_simulation(n = 200, d = 20000, epsilon=0.15)
summarize_jl_results(jl_results)
print(jl_results$plot)
