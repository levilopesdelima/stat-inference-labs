library(ggplot2)
library(knitr)
library(ellipse)
library(tidyverse)
library(knitr)
library(ellipse)
# invert hessian
var_cov_matrix_rate <- solve(mle_optim_rate$hessian)
library(tidyverse)
library(knitr)
library(ellipse)
true_shape <- 2.0
true_rate <- 0.5
n <- 50
set.seed(123)
# Simulating a random sample
sim_data <- rgamma(n, shape = true_shape, rate = true_rate)
# Creating a data frame
plot_df <- data.frame(value = sim_data)
# Creating the plot
ggplot(plot_df, aes(x = value)) +
geom_histogram(aes(y = after_stat(density)),
bins = 15, fill = "lightblue", color = "black", alpha = 0.8) +
stat_function(fun = dgamma,
args = list(shape = true_shape, rate = true_rate),
color = "darkred", linewidth = 1.2) +
labs(
title = "Histogram of Simulated Data vs. True Density",
subtitle = sprintf("Sample (n=%d) from a Gamma(shape=%.1f, rate=%.1f) distribution", n, true_shape, true_rate),
x = "Simulated Value",
y = "Density"
) +
theme_minimal()
neg_log_likelihood_rate <- function(params, data) {
# Just to check whether the parameters are  positive
if (params[1] <= 0 || params[2] <= 0) return(Inf)
shape_param <- params[1]
rate_param <- params[2]
# Calculate the log-likelihood using the shape/rate
ll <- dgamma(data, shape = shape_param, rate = rate_param, log = TRUE)
-sum(ll)
}
sample_mean <- mean(sim_data)
sample_var <- var(sim_data)
# this are the  sample correspondents of the expressions above giving the parameters in terms of the moments
start_shape <- sample_mean^2 / sample_var
start_rate <- sample_mean / sample_var
start_params <- c(start_shape, start_rate)
# Perform the optimization
mle_optim_rate <- optim(
par = start_params,
fn = neg_log_likelihood_rate,
data = sim_data,
hessian = TRUE
)
# Extract the ML estimates
mle_params_rate <- mle_optim_rate$par
names(mle_params_rate) <- c("Shape (lambda)", "Rate (alpha)")
print(mle_params_rate)
# invert hessian
var_cov_matrix_rate <- solve(mle_optim_rate$hessian)
print(var_cov_matrix_rate)
theta <- atan2(-2*var_cov_matrix_rate[1,2],var_cov_matrix_rate[2,2]-var_cov_matrix_rate[1,1])/2
print(theta)
theta <- atan(-2*var_cov_matrix_rate[1,2],var_cov_matrix_rate[2,2]-var_cov_matrix_rate[1,1])/2
theta <- atan2(-2*var_cov_matrix_rate[1,2],var_cov_matrix_rate[2,2]-var_cov_matrix_rate[1,1])/2
print(theta)
theta_1 <- atan(-2*var_cov_matrix_rate[1,2]/(var_cov_matrix_rate[2,2]-var_cov_matrix_rate[1,1]
))/2
print(theta)
theta_1 <- atan(2*var_cov_matrix_rate[1,2]/(var_cov_matrix_rate[1,1]-var_cov_matrix_rate[2,2]
))/2
print(theta)
theta_1 <- atan(2*var_cov_matrix_rate[1,2]/(var_cov_matrix_rate[1,1]-var_cov_matrix_rate[2,2]
))/2
print(theta)
theta <- atan(2*var_cov_matrix_rate[1,2]/(var_cov_matrix_rate[1,1]-var_cov_matrix_rate[2,2]
))/2
print(theta)
theta <- atan(2*var_cov_matrix_rate[1,2]/(var_cov_matrix_rate[1,1]-var_cov_matrix_rate[2,2]
))/2
print(theta)
