"0","plot_clt_cdf_convergence <- function(population_size = 10000, sample_size = 50, num_samples = 10000) {"
"0","  "
"0","  set.seed(42) # for reproducibility"
"0","  "
"0","  # 1. Create populations and store true parameters "
"0","  population_uniform <- runif(population_size, 0, 10)"
"0","  population_exponential <- rexp(population_size, rate = 0.5)"
"0","  population_gamma <- rgamma(population_size, shape = 2, scale = 2)"
"0","  "
"0","  pop_stats <- data.frame("
"0","    distribution = factor(c(""Uniform"", ""Exponential"", ""Gamma""), levels = c(""Uniform"", ""Exponential"", ""Gamma"")),"
"0","    pop_mean = c(mean(population_uniform), mean(population_exponential), mean(population_gamma)),"
"0","    pop_sd = c(sd(population_uniform), sd(population_exponential), sd(population_gamma))"
"0","  )"
"0","  "
"0","  # 2. Simulate sample means"
"0","  simulate_means <- function(population, n_samples, samp_size) {"
"0","    replicate(n_samples, mean(sample(population, size = samp_size, replace = TRUE)))"
"0","  }"
"0","  "
"0","  plot_data <- data.frame("
"0","    means = c("
"0","      simulate_means(population_uniform, num_samples, sample_size),"
"0","      simulate_means(population_exponential, num_samples, sample_size),"
"0","      simulate_means(population_gamma, num_samples, sample_size)"
"0","    ),"
"0","    distribution = factor(rep(c(""Uniform"", ""Exponential"", ""Gamma""), each = num_samples), levels = c(""Uniform"", ""Exponential"", ""Gamma""))"
"0","  )"
"0","  "
"0","  # 3. Pre-calculate data for the theoretical normal CDF curve"
"0","  # This is the robust method to ensure the correct curve is drawn in each facet."
"0","  theoretical_cdf_data <- plot_data %>%"
"0","    group_by(distribution) %>%"
"0","    reframe(x_coords = seq(min(means), max(means), length.out = 500)) %>%"
"0","    left_join(pop_stats, by = ""distribution"") %>%"
"0","    mutate("
"0","      y_coords = pnorm(x_coords, mean = pop_mean, sd = pop_sd / sqrt(sample_size))"
"0","    )"
"0",""
"0","  # 4. Generate the plot"
"0","  p <- ggplot(plot_data, aes(x = means)) +"
"0","    "
"0","    # Plot the empirical CDF from the simulated data (the ""real"" result)"
"0","    stat_ecdf(aes(color = ""Empirical CDF""), geom = ""step"", linewidth = 1) +"
"0","    "
"0","    # Plot the theoretical normal CDF (the CLT's prediction)"
"0","    geom_line("
"0","      data = theoretical_cdf_data,"
"0","      aes(x = x_coords, y = y_coords, color = ""Theoretical Normal CDF""),"
"0","      linewidth = 1.2,"
"0","      linetype = ""dashed"""
"0","    ) +"
"0","    "
"0","    facet_wrap(~ distribution, scales = ""free_x"") +"
"0","    "
"0","    # 5. Control appearance and add legend "
"0","    scale_color_manual("
"0","      name = ""Distribution Type"","
"0","      values = c(""Empirical CDF"" = ""dodgerblue"", ""Theoretical Normal CDF"" = ""red"")"
"0","    ) +"
"0","    labs("
"0","      title = ""CLT Convergence of Cumulative Distribution Functions (CDFs)"","
"0","      subtitle = paste(""Comparing simulated ECDF to the theoretical Normal CDF for n ="", sample_size),"
"0","      x = ""Sample Mean"","
"0","      y = ""Cumulative Probability"""
"0","    ) +"
"0","    theme_minimal() +"
"0","    theme("
"0","      plot.title = element_text(hjust = 0.5, size = 16),"
"0","      plot.subtitle = element_text(hjust = 0.5, size = 12),"
"0","      legend.position = ""bottom"""
"0","    )"
"0","  "
"0","  return(p)"
"0","}"
